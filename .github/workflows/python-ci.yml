name: Python CI

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 mypy black isort bandit safety
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Type check with mypy
      run: |
        mypy src --ignore-missing-imports
      continue-on-error: true
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run integration tests
      run: |
        python main.py --demo --output test_output/ --verbose
        echo "=== Generated files ==="
        find test_output/ -type f -name "*.csv" -o -name "*.png" -o -name "*.json" | head -10
        echo "=== Directory structure ==="
        ls -la test_output/
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ github.run_number }}
        path: test_output/
        retention-days: 30

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort bandit safety
    
    - name: Check code formatting with black
      run: |
        echo "=== Black formatting check ==="
        black --check --diff src tests main.py
      continue-on-error: true
    
    - name: Check import sorting with isort
      run: |
        echo "=== Import sorting check ==="
        isort --check-only --diff src tests main.py
      continue-on-error: true
    
    - name: Security check with bandit
      run: |
        echo "=== Security scan with bandit ==="
        bandit -r src -f json -o bandit-report.json
        echo "Bandit scan completed"
      continue-on-error: true
    
    - name: Check dependencies for security vulnerabilities
      run: |
        echo "=== Dependency security check ==="
        safety check --json --output safety-report.json
        echo "Safety check completed"
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30
      if: always()

  summary:
    runs-on: ubuntu-latest
    needs: [test, integration-test, code-quality]
    if: always()
    
    steps:
    - name: Print summary
      run: |
        echo "=== CI Pipeline Summary ==="
        echo "Test job status: ${{ needs.test.result }}"
        echo "Integration test status: ${{ needs.integration-test.result }}"
        echo "Code quality status: ${{ needs.code-quality.result }}"
        echo "=========================="
        
        if [[ "${{ needs.test.result }}" == "success" ]]; then
          echo "✅ All unit tests passed"
        else
          echo "❌ Unit tests failed"
        fi
        
        if [[ "${{ needs.integration-test.result }}" == "success" ]]; then
          echo "✅ Integration tests passed"
        else
          echo "❌ Integration tests failed"
        fi
        
        if [[ "${{ needs.code-quality.result }}" == "success" ]]; then
          echo "✅ Code quality checks passed"
        else
          echo "⚠️ Code quality checks had issues (non-blocking)"
        fi

